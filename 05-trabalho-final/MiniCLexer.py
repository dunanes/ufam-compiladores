# Generated from MiniC.g by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,227,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
        1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,27,1,27,3,27,152,8,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,34,4,34,191,8,34,11,34,12,34,192,1,34,5,34,196,8,34,
        10,34,12,34,199,9,34,1,35,4,35,202,8,35,11,35,12,35,203,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,5,37,214,8,37,10,37,12,37,217,9,37,
        1,37,1,37,1,38,4,38,222,8,38,11,38,12,38,223,1,38,1,38,0,0,39,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,232,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,
        1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,
        91,1,0,0,0,15,93,1,0,0,0,17,96,1,0,0,0,19,99,1,0,0,0,21,102,1,0,
        0,0,23,105,1,0,0,0,25,108,1,0,0,0,27,111,1,0,0,0,29,114,1,0,0,0,
        31,117,1,0,0,0,33,120,1,0,0,0,35,122,1,0,0,0,37,124,1,0,0,0,39,126,
        1,0,0,0,41,128,1,0,0,0,43,130,1,0,0,0,45,132,1,0,0,0,47,134,1,0,
        0,0,49,137,1,0,0,0,51,140,1,0,0,0,53,144,1,0,0,0,55,151,1,0,0,0,
        57,153,1,0,0,0,59,156,1,0,0,0,61,162,1,0,0,0,63,167,1,0,0,0,65,173,
        1,0,0,0,67,182,1,0,0,0,69,190,1,0,0,0,71,201,1,0,0,0,73,205,1,0,
        0,0,75,209,1,0,0,0,77,221,1,0,0,0,79,80,5,44,0,0,80,2,1,0,0,0,81,
        82,5,59,0,0,82,4,1,0,0,0,83,84,5,40,0,0,84,6,1,0,0,0,85,86,5,41,
        0,0,86,8,1,0,0,0,87,88,5,123,0,0,88,10,1,0,0,0,89,90,5,125,0,0,90,
        12,1,0,0,0,91,92,5,61,0,0,92,14,1,0,0,0,93,94,5,43,0,0,94,95,5,61,
        0,0,95,16,1,0,0,0,96,97,5,45,0,0,97,98,5,61,0,0,98,18,1,0,0,0,99,
        100,5,42,0,0,100,101,5,61,0,0,101,20,1,0,0,0,102,103,5,47,0,0,103,
        104,5,61,0,0,104,22,1,0,0,0,105,106,5,37,0,0,106,107,5,61,0,0,107,
        24,1,0,0,0,108,109,5,61,0,0,109,110,5,61,0,0,110,26,1,0,0,0,111,
        112,5,33,0,0,112,113,5,61,0,0,113,28,1,0,0,0,114,115,5,60,0,0,115,
        116,5,61,0,0,116,30,1,0,0,0,117,118,5,62,0,0,118,119,5,61,0,0,119,
        32,1,0,0,0,120,121,5,62,0,0,121,34,1,0,0,0,122,123,5,60,0,0,123,
        36,1,0,0,0,124,125,5,43,0,0,125,38,1,0,0,0,126,127,5,45,0,0,127,
        40,1,0,0,0,128,129,5,42,0,0,129,42,1,0,0,0,130,131,5,47,0,0,131,
        44,1,0,0,0,132,133,5,37,0,0,133,46,1,0,0,0,134,135,5,43,0,0,135,
        136,5,43,0,0,136,48,1,0,0,0,137,138,5,45,0,0,138,139,5,45,0,0,139,
        50,1,0,0,0,140,141,5,105,0,0,141,142,5,110,0,0,142,143,5,116,0,0,
        143,52,1,0,0,0,144,145,5,99,0,0,145,146,5,104,0,0,146,147,5,97,0,
        0,147,148,5,114,0,0,148,54,1,0,0,0,149,152,3,51,25,0,150,152,3,53,
        26,0,151,149,1,0,0,0,151,150,1,0,0,0,152,56,1,0,0,0,153,154,5,105,
        0,0,154,155,5,102,0,0,155,58,1,0,0,0,156,157,5,119,0,0,157,158,5,
        104,0,0,158,159,5,105,0,0,159,160,5,108,0,0,160,161,5,101,0,0,161,
        60,1,0,0,0,162,163,5,101,0,0,163,164,5,108,0,0,164,165,5,115,0,0,
        165,166,5,101,0,0,166,62,1,0,0,0,167,168,5,98,0,0,168,169,5,114,
        0,0,169,170,5,101,0,0,170,171,5,97,0,0,171,172,5,107,0,0,172,64,
        1,0,0,0,173,174,5,99,0,0,174,175,5,111,0,0,175,176,5,110,0,0,176,
        177,5,116,0,0,177,178,5,105,0,0,178,179,5,110,0,0,179,180,5,117,
        0,0,180,181,5,101,0,0,181,66,1,0,0,0,182,183,5,114,0,0,183,184,5,
        101,0,0,184,185,5,116,0,0,185,186,5,117,0,0,186,187,5,114,0,0,187,
        188,5,110,0,0,188,68,1,0,0,0,189,191,7,0,0,0,190,189,1,0,0,0,191,
        192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,197,1,0,0,0,194,
        196,7,1,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,
        198,1,0,0,0,198,70,1,0,0,0,199,197,1,0,0,0,200,202,7,2,0,0,201,200,
        1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,72,1,
        0,0,0,205,206,5,39,0,0,206,207,9,0,0,0,207,208,5,39,0,0,208,74,1,
        0,0,0,209,210,5,47,0,0,210,211,5,47,0,0,211,215,1,0,0,0,212,214,
        8,3,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,
        1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,6,37,0,0,219,76,
        1,0,0,0,220,222,7,4,0,0,221,220,1,0,0,0,222,223,1,0,0,0,223,221,
        1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,6,38,0,0,226,78,
        1,0,0,0,7,0,151,192,197,203,215,223,1,6,0,0
    ]

class MiniCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    INT = 26
    CHAR = 27
    TIPO = 28
    IF = 29
    WHILE = 30
    ELSE = 31
    BREAK = 32
    CONTINUE = 33
    RETURN = 34
    Identifier = 35
    CONSTANT_INT = 36
    CONSTANT_CHAR = 37
    COMMENT = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "';'", "'('", "')'", "'{'", "'}'", "'='", "'+='", "'-='", 
            "'*='", "'/='", "'%='", "'=='", "'!='", "'<='", "'>='", "'>'", 
            "'<'", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'int'", 
            "'char'", "'if'", "'while'", "'else'", "'break'", "'continue'", 
            "'return'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "CHAR", "TIPO", "IF", "WHILE", "ELSE", "BREAK", "CONTINUE", 
            "RETURN", "Identifier", "CONSTANT_INT", "CONSTANT_CHAR", "COMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "INT", "CHAR", 
                  "TIPO", "IF", "WHILE", "ELSE", "BREAK", "CONTINUE", "RETURN", 
                  "Identifier", "CONSTANT_INT", "CONSTANT_CHAR", "COMMENT", 
                  "WS" ]

    grammarFileName = "MiniC.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


